{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"top\"></a>\n",
    "<div style=\"width:1000 px\">\n",
    "\n",
    "<div style=\"float:right; width:98 px; height:98px;\">\n",
    "<img src=\"https://raw.githubusercontent.com/Unidata/MetPy/master/src/metpy/plots/_static/unidata_150x150.png\" alt=\"Unidata Logo\" style=\"height: 98px;\">\n",
    "</div>\n",
    "\n",
    "# python-awips: Working with Models\n",
    "### Unidata AMS 2021 Student Conference\n",
    "\n",
    "<div style=\"clear:both\"></div>\n",
    "</div>\n",
    "\n",
    "---\n",
    "\n",
    "<div style=\"float:right; width:250 px\"><img src=\"../../_static/images/python-awips-model-preview.png\" alt=\"Colorized RAP13 CONUS image\" style=\"height: 300px;\"></div>\n",
    "\n",
    "\n",
    "### Focuses\n",
    "\n",
    "* Create a colorized plot for the continental US of model data (grib).\n",
    "* Access the model data from an EDEX server and limit the data returned by using model specific parameters.\n",
    "* Use both *pcolormesh* and *contourf* to create colorized plots, and compare the differences between the two.\n",
    "\n",
    "\n",
    "### Objectives\n",
    "\n",
    "1. [Define Data Request](#1.-Define-Data-Request)\n",
    "1. [Limit Results Based on Time](#2.-Limit-Results-Based-on-Time)\n",
    "1. [Define Map Properties](#3.-Define-Map-Properties)\n",
    "1. [Use the Grid Data!](#4.-Use-the-Grid-Data!)\n",
    "1. [Plot Using pcolormesh](#5.-Plot-Using-pcolormesh)\n",
    "1. [Plot Using contourf](#6.-Plot-Using-contourf)\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from awips.dataaccess import DataAccessLayer\n",
    "import cartopy.crs as ccrs\n",
    "import matplotlib.pyplot as plt\n",
    "from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n",
    "from scipy.constants import convert_temperature"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Define Data Request\n",
    "\n",
    "If you read through the [python-awips: How to Access Data](https://nbviewer.jupyter.org/github/Unidata/pyaos-ams-2021/blob/master/notebooks/dataAccess/python-awips-HowToAccessData.ipynb) training, you will know that we need to set an EDEX url to access our server, and then we create a data request.  In this example we use *grid* as the data type to define our request.\n",
    "In addition to setting the data type, the location, parameters and levels are also set as **RAP13**, **T** (for temperature), and **2.0FHAG** (for Fixed Height Above Ground in meters), respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "DataAccessLayer.changeEDEXHost(\"edex-cloud.unidata.ucar.edu\")\n",
    "request = DataAccessLayer.newDataRequest()\n",
    "request.setDatatype(\"grid\")\n",
    "request.setLocationNames(\"RAP13\")\n",
    "request.setParameters(\"T\")\n",
    "request.setLevels(\"2.0FHAG\")\n",
    "\n",
    "# Take a look at our request\n",
    "print(request)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "## 2. Limit Results Based on Time\n",
    "\n",
    "Models produce many different time variants during their runs, so let's limit the data to the most recent time and forecast run.\n",
    "\n",
    "> Note: You can play around with different times and forecast runs to see the differences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cycles = DataAccessLayer.getAvailableTimes(request, True)\n",
    "times = DataAccessLayer.getAvailableTimes(request)\n",
    "fcstRun = DataAccessLayer.getForecastRun(cycles[-1], times)\n",
    "\n",
    "# Get the most recent grid data\n",
    "response = DataAccessLayer.getGridData(request, [fcstRun[0]])\n",
    "\n",
    "print('Number of available times:', len(times))\n",
    "print('Number of available forecast runs:', len(fcstRun))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "## 3. Define Map Properties\n",
    "\n",
    "In order to plot more than one image, it's easiest to define common logic in a function.  Here, a new function called **make_map** is defined.  This function uses the [matplotlib.pyplot package (plt)](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.html) to create a figure and axis.  The coastlines (continental boundaries) are added, along with lat/lon grids.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_map(bbox, projection=ccrs.PlateCarree()):\n",
    "    fig, ax = plt.subplots(figsize=(16, 9),\n",
    "            subplot_kw=dict(projection=projection))\n",
    "    ax.set_extent(bbox)\n",
    "    ax.coastlines(resolution='50m')\n",
    "    gl = ax.gridlines(draw_labels=True)\n",
    "    gl.top_labels = gl.right_labels = False\n",
    "    gl.xformatter = LONGITUDE_FORMATTER\n",
    "    gl.yformatter = LATITUDE_FORMATTER\n",
    "    return fig, ax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "## 4. Use the Grid Data!\n",
    "\n",
    "Here we get our grid data object from our previous response, and then get the raw data array off that object.  We also get the latitude and longitude arrays, and create a bounding box that we'll use when creating our plots (by calling **make_map** defined above).  Finally, we'll convert our data from degrees Kelvin to Farenheit to make the plot more understandable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid = response[0]\n",
    "data = grid.getRawData()\n",
    "lons, lats = grid.getLatLonCoords()\n",
    "bbox = [lons.min(), lons.max(), lats.min(), lats.max()]\n",
    "\n",
    "# Convert temp from Kelvin to F\n",
    "destUnit = 'F'\n",
    "data = convert_temperature(data, 'K', destUnit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "## 5. Plot Using pcolormesh\n",
    "\n",
    "This example shows how to use [matplotlib.pyplot.pcolormesh](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.pcolormesh.html) to create a colorized plot. We use our **make_map** function to create a subplot and then we create a color scale (cs) and colorbar (cbar) with a label for our plot.\n",
    "\n",
    "> Note: You may see a warning appear with a red background, this is okay, and will go away with subsequent runs of the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cmap = plt.get_cmap('rainbow')\n",
    "fig, ax = make_map(bbox=bbox)\n",
    "cs = ax.pcolormesh(lons, lats, data, cmap=cmap)\n",
    "cbar = fig.colorbar(cs, shrink=0.7, orientation='horizontal')\n",
    "cbar.set_label(grid.getLocationName() +\" \"+ grid.getLevel() + \" \" \\\n",
    "               + grid.getParameter() + \" (\" + destUnit + \") \" \\\n",
    "               + \"valid \" + str(grid.getDataTime().getRefTime()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "## 6. Plot Using contourf\n",
    "\n",
    "This example shows how to use [matplotlib.pyplot.contourf](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.contourf.html) to create a colorized plot. We use our **make_map** function to create a subplot and then we create a color scale (cs2) and colorbar (cbar2) with a label for our plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig2, ax2 = make_map(bbox=bbox)\n",
    "cs2 = ax2.contourf(lons, lats, data, 80, cmap=cmap,\n",
    "                  vmin=data.min(), vmax=data.max())\n",
    "cbar2 = fig2.colorbar(cs2, shrink=0.7, orientation='horizontal')\n",
    "cbar2.set_label(grid.getLocationName() +\" \"+ grid.getLevel() + \" \" \\\n",
    "               + grid.getParameter() + \" (\" + destUnit + \") \" \\\n",
    "               + \"valid \" + str(grid.getDataTime().getRefTime()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "## See also\n",
    "\n",
    "Documentation for:\n",
    "\n",
    "* [awips.DataAccessLayer](http://unidata.github.io/python-awips/api/DataAccessLayer.html)\n",
    "* [awips.PyGridData](http://unidata.github.io/python-awips/api/PyGridData.html)\n",
    "* [matplotlib.pyplot](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.html)\n",
    "* [matplotlib.pyplot.subplot](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.subplot.html)\n",
    "* [matplotlib.pyplot.pcolormesh](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.pcolormesh.html)\n",
    "* [matplotlib.pyplot.contourf](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.contourf.html)\n",
    "\n",
    "\n",
    "### Related Notebooks\n",
    "\n",
    "* [python-awips: How to Access Data](https://nbviewer.jupyter.org/github/Unidata/pyaos-ams-2021/blob/master/notebooks/dataAccess/python-awips-HowToAccessData.ipynb)\n",
    "\n",
    "\n",
    "<a href=\"#top\">Top</a>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:pyaos-ams-2021]",
   "language": "python",
   "name": "conda-env-pyaos-ams-2021-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
