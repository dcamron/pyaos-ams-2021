{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"top\"></a>\n",
    "<div style=\"width:1000 px\">\n",
    "\n",
    "<div style=\"float:right; width:98 px; height:98px;\">\n",
    "<img src=\"https://raw.githubusercontent.com/Unidata/MetPy/master/src/metpy/plots/_static/unidata_150x150.png\" alt=\"Unidata Logo\" style=\"height: 98px;\">\n",
    "</div>\n",
    "\n",
    "# Overview of Isentropic Analysis\n",
    "### Unidata AMS 2021 Student Conference\n",
    "\n",
    "<div style=\"clear:both\"></div>\n",
    "</div>\n",
    "\n",
    "---\n",
    "\n",
    "Analysis and visualization in isentropic coordinates can be an important tool for synoptic meteorology. This notebook provides an introduction to isentropic coordinates and demonstrates basic plotting for isentropic analysis. \n",
    "<div style=\"float:right; width:250 px\"><img src=\"../../instructors/images/isentropic_preview.png\" alt=\"Example plot in isentropic coordinates\" style=\"height: 400px;\"></div>\n",
    "\n",
    "\n",
    "### Focuses\n",
    "* Understand the difference between isentropic and isobaric coordinates\n",
    "* Demonstrate isentropic coordinate for synoptic meteorology\n",
    "* Convert model output in isobaric coordinates to isentropic coordinates with [MetPy](https://unidata.github.io/MetPy/latest/index.html)\n",
    "* Demonstrate visualizing this with [Matplotlib](https://matplotlib.org/)\n",
    "\n",
    "\n",
    "### Objectives\n",
    "1. [Understanding Isentropic Coordinates](#1.-Understanding-Isentropic-Coordinates)\n",
    "1. [Interpolation to Isentropic Coordinates](#2.-Interpolation-to-Isentropic-Coordinates)\n",
    "1. [Plotting Isentropic Coordinates](#3.-Plotting-Isentropic-Coordinates)\n",
    "1. [See also](#4.-See-also)\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports\n",
    "We will begin by importing the important packages to be used throughout this example. This example will use sample data included within the MetPy package. Further examples of isentropic interpolation and analysis can be found in the [MetPy documentation](https://unidata.github.io/MetPy/latest/examples/isentropic_example.html#sphx-glr-examples-isentropic-example-py) and in the [Unidata Python Gallery](https://unidata.github.io/python-gallery/examples/Isentropic_Interpolation.html#sphx-glr-examples-isentropic-interpolation-py)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeature\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import xarray as xr\n",
    "\n",
    "import metpy.calc as mpcalc\n",
    "from metpy.cbook import get_test_data\n",
    "from metpy.plots import add_timestamp\n",
    "from metpy.units import units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Understanding Isentropic Coordinates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gridded meteorological data, such as model output, is provided on a grid, regularly spaced horizontally, vertically, and in time. Horizontally, such data is typically projected to a geographic reference grid, such as the Lambert Conformal Conic, with common units of distance (typically meters). The vertical coordinate can also be geo-referenced in meters (either above mean sea level, MSL, or above ground level, AGL). However, it is more common to use units of pressure as the vertical coordinate. This is called *isobaric coordinates*, where height is referenced by decreasing pressure as altitude increases. This system is quite common in synoptic meteorology, and is often the system in which gridded data is provided.\n",
    "\n",
    "Another choice of vertical reference is to use potential temperature rather than pressure. This is referred to as *isentropic coordinates*. Potential temperature increases with increasing height for a neutral or statically stable atmosphere. This means that a constant surface of potential temperature (called an *isentropic surface*) can be used as the vertical reference.\n",
    "\n",
    "Just like isobaric surfaces are used for synoptic analysis (such as the 500-mb height analysis), an isentropic surface can also be used. A parcel of air will remain at the same potential temperature at it moves through the atmosphere since this movement is adiabatic. Therefore, air parcels will travel horizontally along isentropic surfaces. The advantage of isentropic analysis then is that if wind vectors are plotting, movement along the surface can be implied directly, rather than through geostrophic asumptions inherent in isobaric coordinates. Additionally, if pressure is contoured on the surface, vertical motion can be implied directly without the need for Quasi-Geostrophic assumptions.\n",
    "\n",
    "For a more complete description of isentropic coordinates and its associated advantages and disadvantages, see this [presentation](https://www.atmos.illinois.edu/~snesbitt/ATMS505/stuff/07_Isentropic%20Analysis.pdf) from the University of Illinois."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Interpolation to Isentropic Coordinates\n",
    "\n",
    "To perform an anlysis on isentropic surfaces, we must first convert our data to isentropic coordinates. This is easily acomplished with `mpcalc.isentropic_interpolation`. Let's start by opening some sample data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = xr.open_dataset(get_test_data('narr_example.nc', False))\n",
    "data = data.squeeze().set_coords(['lon', 'lat'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All that is required to interpolate to isentropic coordinates is to specify the surfaces we want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "isentlevs = [296.] * units.kelvin\n",
    "isent_data = mpcalc.isentropic_interpolation_as_dataset(\n",
    "    isentlevs,\n",
    "    data['Temperature'],\n",
    "    data['u_wind'],\n",
    "    data['v_wind'],\n",
    "    data['Specific_humidity'],\n",
    "    data['Geopotential_height']\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make plotting easier, we will perform some unit conversions and calculate relative humidity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert wind to kt\n",
    "isent_data['u_wind'] = isent_data['u_wind'].metpy.convert_units('kt')\n",
    "isent_data['v_wind'] = isent_data['v_wind'].metpy.convert_units('kt')\n",
    "\n",
    "# Calculate relative humidity\n",
    "isent_data['Relative_humidity'] = mpcalc.relative_humidity_from_specific_humidity(\n",
    "    isent_data['pressure'],\n",
    "    isent_data['temperature'],\n",
    "    isent_data['Specific_humidity']\n",
    ").metpy.convert_units('percent')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's it! Our original gridded model data in isobaric coordinates has been converted to isentropic coordinates. Now, on to plotting."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Plotting Isentropic Coordinates\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plotting isentropic coordinates is much the same as for isobaric coordinates. A common analysis is to plot pressure, wind, and relative humidity on a constant isentropic surface. This can be accomplished through the use of `ax.contour`, `ax.contourf`, and `ax.barbs`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up our projection and coordinates\n",
    "crs = ccrs.LambertConformal(central_longitude=-100.0, central_latitude=45.0)\n",
    "lon = isent_data['pressure'].metpy.longitude\n",
    "lat = isent_data['pressure'].metpy.latitude\n",
    "\n",
    "# Coordinates to limit map area\n",
    "bounds = [(-122., -75., 25., 50.)]\n",
    "# Choose a level to plot, in this case 296 K (our sole level in this example)\n",
    "level = 0\n",
    "\n",
    "fig = plt.figure(figsize=(17., 12.))\n",
    "ax = fig.add_subplot(1, 1, 1, projection=crs)\n",
    "ax.set_extent(*bounds, crs=ccrs.PlateCarree())\n",
    "ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)\n",
    "ax.add_feature(cfeature.STATES, linewidth=0.5)\n",
    "\n",
    "# Plot the surface\n",
    "clevisent = np.arange(0, 1000, 25)\n",
    "cs = ax.contour(lon, lat, isent_data['pressure'].isel(isentropic_level=level),\n",
    "                clevisent, colors='k', linewidths=1.0, linestyles='solid',\n",
    "                transform=ccrs.PlateCarree())\n",
    "cs.clabel(fontsize=10, inline=1, inline_spacing=7, fmt='%i', rightside_up=True,\n",
    "          use_clabeltext=True)\n",
    "\n",
    "# Plot RH\n",
    "cf = ax.contourf(lon, lat, isent_data['Relative_humidity'].isel(isentropic_level=level),\n",
    "                 range(10, 106, 5), cmap=plt.cm.gist_earth_r, transform=ccrs.PlateCarree())\n",
    "cb = fig.colorbar(cf, orientation='horizontal', aspect=65, shrink=0.5, pad=0.05,\n",
    "                  extendrect='True')\n",
    "cb.set_label('Relative Humidity', size='x-large')\n",
    "\n",
    "# Plot wind barbs\n",
    "ax.barbs(lon.values, lat.values, isent_data['u_wind'].isel(isentropic_level=level).values,\n",
    "         isent_data['v_wind'].isel(isentropic_level=level).values, length=6,\n",
    "         regrid_shape=20, transform=ccrs.PlateCarree())\n",
    "\n",
    "# Make some titles\n",
    "ax.set_title(f'{isentlevs[level]:~.0f} Isentropic Pressure (hPa), Wind (kt), '\n",
    "             'Relative Humidity (percent)', loc='left')\n",
    "add_timestamp(ax, isent_data['time'].values.astype('datetime64[ms]').astype('O'),\n",
    "              y=0.02, high_contrast=True)\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above image, it can be inferred that there is rising motion over much of New England where the wind vectors show motion from higher pressure toward lower pressure across pressure contours."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. See also\n",
    "For a more complete description of isentropic coordinates and its associated advantages and disadvantages, see this [presentation](https://www.atmos.illinois.edu/~snesbitt/ATMS505/stuff/07_Isentropic%20Analysis.pdf) from the University of Illinois. Further examples of isentropic interpolation and analysis can be found in the [MetPy documentation](https://unidata.github.io/MetPy/latest/examples/isentropic_example.html#sphx-glr-examples-isentropic-example-py) and in the [Unidata Python Gallery](https://unidata.github.io/python-gallery/examples/Isentropic_Interpolation.html#sphx-glr-examples-isentropic-interpolation-py)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:pyaos-ams-2021]",
   "language": "python",
   "name": "conda-env-pyaos-ams-2021-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
