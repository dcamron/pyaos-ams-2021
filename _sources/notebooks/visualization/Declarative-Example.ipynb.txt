{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"top\"></a>\n",
    "<div style=\"width:1000 px\">\n",
    "\n",
    "<div style=\"float:right; width:98 px; height:98px;\">\n",
    "<img src=\"https://raw.githubusercontent.com/Unidata/MetPy/master/src/metpy/plots/_static/unidata_150x150.png\" alt=\"Unidata Logo\" style=\"height: 98px;\">\n",
    "</div>\n",
    "\n",
    "# Declarative Syntax Example\n",
    "### Unidata AMS 2021 Student Conference\n",
    "\n",
    "<div style=\"clear:both\"></div>\n",
    "</div>\n",
    "\n",
    "---\n",
    "\n",
    "<div style=\"float:right; width:1200 px\"><img src=\"../../instructors/images/declarative_surface.png\" alt=\"declarative_surface\" style=\"height: 300px;\"></div>\n",
    "\n",
    "\n",
    "### Focuses\n",
    "* Read in satellite data using Siphon\n",
    "* Plot satellite, surface, and upper air observations using the declarative interface\n",
    "* Utilize MetPy's METAR functionality to load recent surface observations\n",
    "\n",
    "\n",
    "### Objectives\n",
    "1. [Satellite Data](#1.-Satellite-Observations)\n",
    "1. [Surface Observations](#2.-Surface-Observations)\n",
    "1. [Upper-air Observations](#3.-Upper-air-observations)\n",
    "1. [Model Data](#4.-Model-data)\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The MetPy declarative syntax, similar to GEMPAK, allows for a simplified interface to create common meteorological analyses including surface observation plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime, timedelta\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import cartopy.crs as ccrs\n",
    "import pandas as pd\n",
    "\n",
    "from metpy.cbook import get_test_data\n",
    "from metpy.io import metar\n",
    "import metpy.plots as mpplots\n",
    "from metpy.units import units\n",
    "from siphon.catalog import TDSCatalog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Satellite Observations\n",
    "\n",
    "### Accessing data via Siphon\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create variables for URL generation\n",
    "image_date = datetime.utcnow().date()\n",
    "region = 'CONUS'\n",
    "channel = 8\n",
    "\n",
    "# Create the URL to provide to siphon\n",
    "data_url =  ('https://thredds.ucar.edu/thredds/catalog/satellite/goes/east/products/'\n",
    "            f'CloudAndMoistureImagery/{region}/Channel{channel:02d}/'\n",
    "            f'{image_date:%Y%m%d}/catalog.xml')\n",
    "\n",
    "# Create a catalog for the dataset\n",
    "cat = TDSCatalog(data_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the second dataset and print the output\n",
    "dataset = cat.datasets[1]\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we read it in using xarray\n",
    "ds = dataset.remote_access(use_xarray=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "\n",
    "### Plotting Satellite Data\n",
    "\n",
    "\n",
    "\n",
    "To plot our data we'll be using MetPy's new declarative plotting functionality. You can write lots of matplotlib based code, but this interface greatly reduces the number of lines you need to write to get a great starting plot and then lets you customize it. The declarative plotting interface consists of three fundamental objects/concepts:\n",
    "\n",
    "* **Plot** - This is the actual representation of the data and can be ImagePlot, ContourPlot, Plot2D, FilledContourPlot and BarbPlot.\n",
    "* **Panel** - This is a single panel (i.e. coordinate system). Panels contain plots. Currently the MapPanel is the only panel type available.\n",
    "* **Panel Container** - The container can hold multiple panels to make a multi-pane figure. Panel Containers can be thought of as the whole figure object in matplotlib.\n",
    "\n",
    "So containers have panels which have plots. It takes a second to get that straight in your mind, but it makes setting up complex figures very simple.\n",
    "\n",
    "For this plot we need a single panel and we want to plot the satellite image, so we'll use the `ImagePlot`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img = mpplots.ImagePlot()\n",
    "img.data = ds\n",
    "img.field = 'Sectorized_CMI'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we'll make the panel that our image will go into, the MapPanel object and add the image to the plots on the panel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "panel = mpplots.MapPanel()\n",
    "panel.plots = [img]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we make the PanelContainer and add the panel to its container. Remember that since we can have multiple plots on a panel and multiple panels on a plot, we use lists. In this case is just happens to be a list of length 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pc = mpplots.PanelContainer()\n",
    "pc.panels = [panel]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unlike working with matplotlib directly in the notebooks, this figure hasn't actually been rendered yet. Calling the show method of the panel container builds up everything, renders, and shows it to us."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's add a few more labels/colors onto there and include this whole process in a single cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the image plot\n",
    "img = mpplots.ImagePlot()\n",
    "img.data = ds\n",
    "img.field = 'Sectorized_CMI'\n",
    "img.colormap = 'WVCIMSS_r'\n",
    "img.image_range = (195, 265)\n",
    "\n",
    "# Make the map panel and add the image to it\n",
    "panel = mpplots.MapPanel()\n",
    "panel.layers = ['coastline', 'borders', 'states']\n",
    "panel.plots = [img]\n",
    "\n",
    "# Make the panel container and add the panel to it\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.panels = [panel]\n",
    "pc.size=(15, 9)\n",
    "\n",
    "# Add a timestamp\n",
    "start_time = datetime.strptime(ds.start_date_time, '%Y%j%H%M%S')\n",
    "mpplots.add_timestamp(panel.ax, time=start_time)\n",
    "\n",
    "# Show the plot\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "## 2. Surface Observations\n",
    "\n",
    "### Bring in surface data\n",
    "In this example, data is originally from the Iowa State ASOS archive (https://mesonet.agron.iastate.edu/request/download.phtml) downloaded through a separate Python script. The data are pre-processed to determine sky cover and weather symbols from text output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(get_test_data('SFC_obs.csv', as_file_obj=False),\n",
    "                   infer_datetime_format=True, parse_dates=['valid'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the surface data\n",
    "\n",
    "Use the declarative plotting interface to plot surface observations over the state of Georgia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting the Observations using a 15 minute time window for surface observations\n",
    "obs = mpplots.PlotObs()\n",
    "obs.data = data\n",
    "obs.time = datetime(1993, 3, 12, 13)\n",
    "obs.time_window = timedelta(minutes=15)\n",
    "obs.level = None\n",
    "obs.fields = ['tmpf', 'dwpf', 'emsl', 'cloud_cover', 'wxsym']\n",
    "obs.locations = ['NW', 'SW', 'NE', 'C', 'W']\n",
    "obs.colors = ['red', 'green', 'black', 'black', 'blue']\n",
    "obs.formats = [None, None, lambda v: format(10 * v, '.0f')[-3:], 'sky_cover',\n",
    "               'current_weather']\n",
    "obs.vector_field = ('uwind', 'vwind')\n",
    "obs.reduce_points = 1\n",
    "\n",
    "# Add map features for the particular panel\n",
    "panel = mpplots.MapPanel()\n",
    "panel.layout = (1, 1, 1)\n",
    "panel.area = 'ga'\n",
    "panel.projection = ccrs.PlateCarree()\n",
    "panel.layers = ['coastline', 'borders', 'states']\n",
    "panel.plots = [obs]\n",
    "\n",
    "# Collecting panels for complete figure\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.size = (10, 10)\n",
    "pc.panels = [panel]\n",
    "\n",
    "# Showing the results\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Working with METAR data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One can also use the realtime METARs as a datasource, utilizing MetPy's METAR parsing functionality\n",
    "\n",
    "Data is from the [Unidata Thredds Test Server](https://thredds-test.unidata.ucar.edu/thredds/catalog/noaaport/text/metar/catalog.html) which includes data from thirty days in the past to current observations\n",
    "\n",
    "Another data source is the Iowa State ASOS Archive, described previously"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use siphon to read in a METAR text file from the Unidata Thredds server\n",
    "cat = TDSCatalog('https://thredds-test.unidata.ucar.edu/thredds/catalog/noaaport/text/metar/catalog.xml')\n",
    "\n",
    "# Load in the latest hour's data, subtracting 30 minutes to ensure the observations have enough time to be read\n",
    "metar_ds = cat.datasets.filter_time_nearest(datetime.utcnow() - timedelta(minutes=30))\n",
    "\n",
    "# Download the file\n",
    "metar_ds.download()\n",
    "\n",
    "# Parse the text file and create a Pandas dataframe\n",
    "sfc_data = metar.parse_metar_file(metar_ds.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we want to make sure we convert the temperature and dewpoint from degrees Celsius to degrees Fahrenheit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sfc_data['air_temperature']  = (sfc_data['air_temperature'].values * units(sfc_data.units['air_temperature'])).to('degF')\n",
    "sfc_data['dew_point_temperature'] = (sfc_data['dew_point_temperature'].values * units(sfc_data.units['dew_point_temperature'])).to('degF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we setup our `PlotObs` object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup the PlotObs\n",
    "obs = mpplots.PlotObs()\n",
    "obs.data = sfc_data\n",
    "obs.level = None\n",
    "obs.fields = ['air_temperature', 'dew_point_temperature', 'air_pressure_at_sea_level', 'cloud_coverage', 'present_weather', 'past_weather']\n",
    "obs.locations = ['NW', 'SW', 'NE', 'C', 'W', 'SE']\n",
    "obs.formats = [None, None, lambda v: format(10 * v, '.0f')[-3:], 'sky_cover',\n",
    "               'current_weather', 'current_weather']\n",
    "obs.vector_field = ('eastward_wind', 'northward_wind')\n",
    "obs.reduce_points = 2\n",
    "\n",
    "# Setup the MapPanel\n",
    "panel = mpplots.MapPanel()\n",
    "panel.layers = ['coastline', 'borders', 'states', 'land', 'ocean']\n",
    "panel.area = 'centus'\n",
    "panel.projection = 'lcc'\n",
    "panel.plots = [obs]\n",
    "#panel.title = 'Surface Observations'\n",
    "\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.panels = [panel]\n",
    "pc.size=(15, 9)\n",
    "mpplots.add_timestamp(panel.ax, time=start_time)\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "## 3. Upper-air observations\n",
    "\n",
    "Plot upper level data using test data - the test data was pulled from the Iowa State upper-air archive which also requires preprocessing to add lats/lons. For now, we will use the test data from MetPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(get_test_data('UPA_obs.csv', as_file_obj=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting the Observations\n",
    "obs = mpplots.PlotObs()\n",
    "obs.data = data\n",
    "obs.time = datetime(1993, 3, 14, 0)\n",
    "obs.level = 500 * units.hPa\n",
    "obs.fields = ['temperature', 'dewpoint', 'height']\n",
    "obs.locations = ['NW', 'SW', 'NE']\n",
    "obs.formats = [None, None, lambda v: format(v, '.0f')[:3]]\n",
    "obs.vector_field = ('u_wind', 'v_wind')\n",
    "obs.reduce_points = 0\n",
    "\n",
    "# Add map features for the particular panel\n",
    "panel = mpplots.MapPanel()\n",
    "panel.layout = (1, 1, 1)\n",
    "panel.area = (-124, -72, 20, 53)\n",
    "panel.projection = 'lcc'\n",
    "panel.layers = ['coastline', 'borders', 'states', 'land', 'ocean']\n",
    "panel.plots = [obs]\n",
    "\n",
    "# Collecting panels for complete figure\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.size = (15, 10)\n",
    "pc.panels = [panel]\n",
    "\n",
    "# Showing the results\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n",
    "## 4. Model data\n",
    "\n",
    "Read in most recent NAM data from the Unidata Thredds Server Other model data can be found using the following website https://thredds.ucar.edu/thredds/catalog.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import data and remotely access it via Siphon using xarray\n",
    "cat_string = 'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/NAM/CONUS_12km/latest.xml'\n",
    "cat = TDSCatalog(cat_string)\n",
    "model_ds = cat.datasets[0].remote_access(use_xarray=True).metpy.parse_cf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select the first time\n",
    "model_ds = model_ds.sel(time = model_ds.time[0:1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert data to proper units using MetPy conversion tools\n",
    "model_ds['Pressure_reduced_to_MSL_msl'] = model_ds.Pressure_reduced_to_MSL_msl.metpy.convert_units('hPa')\n",
    "model_ds['Temperature_height_above_ground'] = model_ds.Temperature_height_above_ground.metpy.convert_units('degF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Smooth the data using gaussian smoothing from SciPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from metpy.calc import smooth_gaussian\n",
    "\n",
    "# Smooth contour for MSLP\n",
    "model_ds['Pressure_reduced_to_MSL_msl'] = smooth_gaussian(model_ds['Pressure_reduced_to_MSL_msl'], 3.0)\n",
    "\n",
    "# Smooth contour for surface temperature\n",
    "model_ds['Temperature_height_above_ground'] = smooth_gaussian(model_ds['Temperature_height_above_ground'], 3.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup the ContourPlot, setting the desired variable to plot\n",
    "contour_mslp = mpplots.ContourPlot()\n",
    "contour_mslp.data = model_ds\n",
    "contour_mslp.field = 'Pressure_reduced_to_MSL_msl' # Variable within the xarray dataset that will be plotted\n",
    "contour_mslp.time = datetime.utcnow()\n",
    "contour_mslp.level = None\n",
    "contour_mslp.linecolor = 'black'\n",
    "contour_mslp.clabels = True\n",
    "contour_mslp.contours = list(range(900, 1100, 4)) # Contour intervals\n",
    "\n",
    "# Setup another ContourPlot for temperature (in degrees Fahrenheit)\n",
    "contour_temp = mpplots.ContourPlot()\n",
    "contour_temp.data = model_ds\n",
    "contour_temp.field = 'Temperature_height_above_ground'\n",
    "contour_temp.time = datetime.utcnow()\n",
    "contour_temp.linecolor = 'red'\n",
    "contour_temp.linestyle = 'dashed'\n",
    "contour_temp.clabels = True\n",
    "contour_temp.contours = list(range(-50, 100, 10)) # Contour intervals\n",
    "\n",
    "# Plot the east coast \n",
    "panel = mpplots.MapPanel()\n",
    "panel.area = 'east'\n",
    "panel.layers = ['coastline', 'borders', 'states', 'land', 'ocean']\n",
    "panel.plots = [contour_temp, contour_mslp]\n",
    "\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.panels = [panel]\n",
    "pc.size=(15, 9)\n",
    "mpplots.add_timestamp(panel.ax, time=datetime.utcnow())\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now try using a `FilledContourPlot`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cfill = mpplots.FilledContourPlot()\n",
    "cfill.time = datetime.utcnow()\n",
    "cfill.data = model_ds\n",
    "cfill.field = 'Temperature_isobaric'\n",
    "cfill.level = 850 * units.hPa\n",
    "cfill.colormap = 'RdBu_r'\n",
    "cfill.contours = list(range(230, 320, 2))\n",
    "cfill.colorbar = 'vertical'\n",
    "\n",
    "# Plot the east coast \n",
    "panel = mpplots.MapPanel()\n",
    "panel.area = 'east'\n",
    "panel.layers = ['coastline', 'borders', 'states']\n",
    "panel.plots = [cfill]\n",
    "\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.panels = [panel]\n",
    "pc.size=(15, 9)\n",
    "mpplots.add_timestamp(panel.ax, time=start_time)\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also add wind barbs on there using `BarbPlot`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot wind barbs\n",
    "barb = mpplots.BarbPlot()\n",
    "barb.time = datetime.utcnow()\n",
    "barb.data = model_ds\n",
    "barb.level = 850 * units.hPa\n",
    "barb.field = ['u-component_of_wind_isobaric', 'v-component_of_wind_isobaric']\n",
    "barb.skip = (15, 15)\n",
    "barb.color = 'black'\n",
    "barb.barblength = 6.5\n",
    "barb.earth_relative = False\n",
    "\n",
    "# Use the same colorfill from the cells above\n",
    "cfill = mpplots.FilledContourPlot()\n",
    "cfill.time = datetime.utcnow()\n",
    "cfill.data = model_ds\n",
    "cfill.field = 'Temperature_isobaric'\n",
    "cfill.level = 850 * units.hPa\n",
    "cfill.colormap = 'RdBu_r'\n",
    "cfill.contours = list(range(230, 320, 2))\n",
    "cfill.colorbar = 'vertical'\n",
    "\n",
    "# Plot the east coast \n",
    "panel = mpplots.MapPanel()\n",
    "panel.area = 'east'\n",
    "panel.layers = ['coastline', 'borders', 'states']\n",
    "panel.plots = [cfill, barb]\n",
    "\n",
    "pc = mpplots.PanelContainer()\n",
    "pc.panels = [panel]\n",
    "pc.size = (15, 9)\n",
    "mpplots.add_timestamp(panel.ax, time=start_time)\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"#top\">Top</a>\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## See Also\n",
    "\n",
    "Be sure to check out other resources\n",
    "* [Declarative Plotting Tutorial](https://unidata.github.io/MetPy/latest/tutorials/declarative_tutorial.html)\n",
    "* [300 hPa Map Example](https://unidata.github.io/python-gallery/examples/Declarative_300hPa.html#sphx-glr-examples-declarative-300hpa-py)\n",
    "\n",
    "### Related Notebooks\n",
    "* Siphon remote access\n",
    "* Siphon remote open\n",
    "?\n",
    "<a href=\"#top\">Top</a>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
